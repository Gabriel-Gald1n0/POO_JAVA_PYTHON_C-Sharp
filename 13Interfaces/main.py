from abc import ABC, abstractmethod 
"""
Interface √© um tipo de classe abstrata que cont√©m apenas m√©todos abstratos.
Uma interface √© uma forma de definir um contrato que as classes devem seguir.
Em Python, interfaces s√£o criadas utilizando a classe ABC e a fun√ß√£o abstractmethod do m√≥dulo abc.
Para criar uma interface, voc√™ precisa importar a classe ABC e a fun√ß√£o abstractmethod do m√≥dulo abc.
Para criar um m√©todo abstrato, voc√™ precisa decor√°-lo com a fun√ß√£o abstractmethod.
Em exemplo de interface, temos a interface IFormas que cont√©m os m√©todos abstratos calcular_area e get_perimetro.
As classes Quadrado e Circulo implementam a interface IFormas e implementam os m√©todos calcular_area e get_perimetro.

Diferen√ßa entre Interface e Classe Abstrata:
- Uma classe abstrata pode conter m√©todos abstratos e m√©todos concretos, enquanto uma interface s√≥ pode conter m√©todos abstratos.
- Uma classe abstrata pode conter atributos, enquanto uma interface n√£o pode conter atributos.
- Uma classe pode herdar de v√°rias interfaces, mas s√≥ pode herdar de uma classe abstrata.
- Uma classe abstrata pode ter construtores, enquanto uma interface n√£o pode ter construtores.
- Uma classe abstrata pode ter m√©todos est√°ticos, enquanto uma interface n√£o pode ter m√©todos est√°ticos.

Quando Usar Cada Uma?
Use Classe Abstrata quando:
‚úî Voc√™ quer compartilhar c√≥digo e comportamento com subclasses.
‚úî Algumas partes da implementa√ß√£o podem ser reutilizadas.

Use Interface quando:
‚úî Voc√™ quer apenas definir um contrato (m√©todos obrigat√≥rios) sem implementa√ß√£o.
‚úî Voc√™ quer garantir que todas as classes implementem os mesmos m√©todos.

üìå Exemplo real:

Animal pode ser uma classe abstrata (pois pode ter atributos e m√©todos concretos).
Veiculo pode ser uma interface (pois s√≥ define m√©todos obrigat√≥rios).
"""
class IFormas(ABC):  # Interface
    @abstractmethod
    def calcular_area(self):
        pass

    @abstractmethod
    def get_perimetro(self) -> float:
        pass

class Quadrado(IFormas):
    def __init__(self, lado):
        self.lado = lado

    def calcular_area(self):
        return self.lado ** 2

    def get_perimetro(self) -> float:
        return 4 * self.lado
    
class Circulo(IFormas):
    def __init__(self, raio):
        self.raio = raio

    def calcular_area(self):
        return 3.14 * (self.raio ** 2)

    def get_perimetro(self) -> float:
        return 2 * 3.14 * self.raio
    

q = Quadrado(4)
print(q.calcular_area())  # Sa√≠da: 16
print(q.get_perimetro())  # Sa√≠da: 16

c = Circulo(5)
print(c.calcular_area())  # Sa√≠da: 78.5
print(c.get_perimetro())  # Sa√≠da: 31.400000000000002
